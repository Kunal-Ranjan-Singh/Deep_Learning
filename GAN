import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.layers import Dense, Reshape, Flatten, LeakyReLU, Input
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.optimizers import Adam

# Load and normalize MNIST
(x_train, _), _ = mnist.load_data()
x_train = (x_train - 127.5) / 127.5
x_train = np.expand_dims(x_train, axis=-1)
img_shape = (28, 28, 1)
latent_dim = 100

# Generator
def build_generator():
    model = Sequential([
        Dense(256, input_dim=latent_dim),
        LeakyReLU(0.2),
        Dense(512), LeakyReLU(0.2),
        Dense(1024), LeakyReLU(0.2),
        Dense(784, activation='tanh'),
        Reshape(img_shape)
    ])
    return model

# Discriminator
def build_discriminator():
    model = Sequential([
        Flatten(input_shape=img_shape),
        Dense(512), LeakyReLU(0.2),
        Dense(256), LeakyReLU(0.2),
        Dense(1, activation='sigmoid')
    ])
    return model

# Models
optimizer = Adam(0.0002, 0.5)
discriminator = build_discriminator()
discriminator.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

generator = build_generator()
z = Input(shape=(latent_dim,))
img = generator(z)
discriminator.trainable = False
valid = discriminator(img)
combined = Model(z, valid)
combined.compile(loss='binary_crossentropy', optimizer=optimizer)

# Training
def train(epochs=100, batch_size=32, save_interval=1000):
    for epoch in range(epochs):
        idx = np.random.randint(0, x_train.shape[0], batch_size // 2)
        imgs = x_train[idx]
        noise = np.random.normal(0, 1, (batch_size, latent_dim))
        gen_imgs = generator.predict(noise)

        d_loss = discriminator.train_on_batch(imgs, np.ones((batch_size//2, 1)))
        d_loss += discriminator.train_on_batch(gen_imgs[:batch_size//2], np.zeros((batch_size//2, 1)))

        g_loss = combined.train_on_batch(noise, np.ones((batch_size, 1)))

        if epoch % save_interval == 0:
            print(f"{epoch} [D loss: {d_loss[0]:.4f}] [G loss: {g_loss:.4f}]")
            save_imgs(epoch, gen_imgs)

def save_imgs(epoch, gen_imgs):
    gen_imgs = 0.5 * gen_imgs + 0.5
    plt.figure(figsize=(5, 5))
    for i in range(25):
        plt.subplot(5, 5, i + 1)
        plt.imshow(gen_imgs[i, :, :, 0], cmap='gray')
        plt.axis('off')
    plt.tight_layout()
    plt.savefig(f"gan_{epoch}.png")
    plt.close()

train()
